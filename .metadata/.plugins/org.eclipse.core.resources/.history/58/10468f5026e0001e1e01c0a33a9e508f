Thymeleaf

1) 기본 사용법
<html>에 xmlns:th 속성을 부여.
	<html xmlns:th="http://www,thymeleaf.org">
	
2) 데이터 출력
	표현식 : ${식별자}, @{url}, *{member_variable}
	
	특정 html 요소에 문자열(숫자 포함) 출력용 속성 : th:text, th:utext
	th:text - innerText(문자열로만 출력), [[${...}]]
	th:utext - innerHTML(하위 요소용 태그를 처리), [($...})]
		<p th:text="${data}"></p>
		<p th:text="${'제목 : ' + data}"></p>
	※	<p th:text="${data}">제목 : </p> -> 이러면 (제목 :) 이 덮어 씌어져서 안보이게 됨.
	
	controller에서 보내는 방식은 spring legacy와 동일하다.
	
 Html 조합 - fragment
 	다수의 htrml을 하나의 문서로 묶어주는 방법이면서
 	한 html을 여러 조각으로 나누ㅝ서 사용하는 방법.
 	
 	<th:fragment> - 페이지를 조각으로 나누는 속성.
 		<th:block> : thymeleaf 코드의 영역을 작성하는 태그.
 		
 		예) frag.html
 		<th:black th:fragment="header">
 			<!-- 헤더용 여러 요소를 작성 -->
 		</th:block>
 		
 		<div th:fragment="footer">
 			<!-- 풋터용 여러 요소를 작성 -->
 		</div>
 		
 	2) <th:insert> - 조각 삽임. 하위 요소로 삽임.
 		<div th:insert="~{frag::header}">
 		다른 문서도 삽임 가능
 		<div th:insert="~{xxx.html}">
 		
 	3) <th:replace> - 조각 대체. 현재 요소를 대체.
 		<div th:replace="~{frag::footer}">
 		
 Front-end(html)에서 Controller로 데이터 전송
 	1) Path variable 방식 (따로 제공되는 방식은 없음)
 		예) 주소칸 : /second/1 등등	
 	2) Query String 방식 (get 방식)
 		예) 주소칸 : /second?data1=1&data2=2
 		thymeleaf : th:href="@{second(data1=1, data2=2)}"
 		자바스크립트는 원래 방식으로 작성.
 	3) Form 전송 (따로 제공되는 방식은 없음)
 		th:action="@{url}"
 	
 Thymeleaf 제어용 태그
 1) <th:block> - 제어 요소를 담기 위한 태그.
 		조건식, 반복식 등을 작성할 때 사용.
 		상위요소가 지정되지 않은 객체의 출력에 활용.
 		<th:block th:object="${dto}">